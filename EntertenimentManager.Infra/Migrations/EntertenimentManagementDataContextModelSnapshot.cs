// <auto-generated />
using System;
using EntertenimentManager.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntertenimentManagement.Infra.Migrations
{
    [DbContext(typeof(EntertenimentManagementDataContext))]
    partial class EntertenimentManagementDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Itens.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Developer")
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "IX_Game_Title")
                        .IsUnique();

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Itens.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Director")
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Distributor")
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "IX_Movie_Title")
                        .IsUnique();

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Itens.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Platform", (string)null);
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("NVARCHAR");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Catalog", (string)null);
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.PersonalList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("BIT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PersonalList", (string)null);
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GamePlatforms", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformsId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("PersonalListGame", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalListId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "PersonalListId");

                    b.HasIndex("PersonalListId");

                    b.ToTable("PersonalListGame");
                });

            modelBuilder.Entity("PersonalListMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalListId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "PersonalListId");

                    b.HasIndex("PersonalListId");

                    b.ToTable("PersonalListMovie");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.Catalog", b =>
                {
                    b.HasOne("EntertenimentManager.Domain.Entities.Users.User", "Owner")
                        .WithOne("Catalog")
                        .HasForeignKey("EntertenimentManager.Domain.Entities.Lists.Catalog", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_Catalog");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.Category", b =>
                {
                    b.HasOne("EntertenimentManager.Domain.Entities.Lists.Catalog", "Catalog")
                        .WithMany("Categories")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK_Category_Catalog");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.PersonalList", b =>
                {
                    b.HasOne("EntertenimentManager.Domain.Entities.Lists.Category", "Category")
                        .WithMany("Lists")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK_PersonalList_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GamePlatforms", b =>
                {
                    b.HasOne("EntertenimentManager.Domain.Entities.Itens.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GamePlatforms_PlatformId");

                    b.HasOne("EntertenimentManager.Domain.Entities.Itens.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GamePlatforms_GameId");
                });

            modelBuilder.Entity("PersonalListGame", b =>
                {
                    b.HasOne("EntertenimentManager.Domain.Entities.Lists.PersonalList", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PersonalListGame_GameId");

                    b.HasOne("EntertenimentManager.Domain.Entities.Itens.Game", null)
                        .WithMany()
                        .HasForeignKey("PersonalListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PersonalListGame_PersonalListId");
                });

            modelBuilder.Entity("PersonalListMovie", b =>
                {
                    b.HasOne("EntertenimentManager.Domain.Entities.Lists.PersonalList", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PersonalListMovie_MovieId");

                    b.HasOne("EntertenimentManager.Domain.Entities.Itens.Movie", null)
                        .WithMany()
                        .HasForeignKey("PersonalListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PersonalListMovie_PersonalListId");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("EntertenimentManager.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_UserId");

                    b.HasOne("EntertenimentManager.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_RoleId");
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.Catalog", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Lists.Category", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("EntertenimentManager.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Catalog");
                });
#pragma warning restore 612, 618
        }
    }
}
